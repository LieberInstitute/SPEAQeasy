/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 * 
 *
 * In order to customize the cluster environment for sge-large,
 * simply change the cpu and memory available to the executor
 * as well as each task below
 */

params {
  salmon_min_read_len = 31
  juncts_min_intron_len = 9
  bam2wig_depth_thres = 4000000000
  samtools_min_map_q = 0
  samtools_min_base_q = 13
  samtools_max_depth = 1000000
  kallisto_len_mean = 200
  kallisto_len_sd = 30
}

process {

  executor = 'sge'

  penv = 'smp'
  queue = 'mainqueue'

  disk = '2.GB'
  cpus = { 1 * task.attempt }
  memory = { 2.GB * task.attempt }
  time = { 2.hour * task.attempt }
  errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }

  maxRetries = '3'
  maxErrors = '-1'

  withName: pullGENCODEassemblyfa {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: buildHISATindex {
    cpus = '8'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: pullGENCODEgtf {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: buildPrepBED {
    cpus = { 8 * task.attempt }
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: pullGENCODEtranscripts {
    cpus = '1'
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: buildSALMONindex  {
    cpus = { 8 * task.attempt }
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: Merging {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: ERCC {
    cpus = '8'
    memory = '5.GB'
    queue = ''
    disk = '' 
  }
  withName: Manifest {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: QualityUntrimmed { 
    cpus = { 1 * task.attempt }
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: AdaptiveTrimSingleReads {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: AdaptiveTrimPairedReads {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: Trimming {
    cpus = '8'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: QualityTrimmed {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: SingleEndHISAT {
    cpus = '8'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: PairedEndNoTrimHISAT {
    cpus = '8'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: PairedEndTrimmedHISAT {
    cpus = '8'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: SamtoBam {
    cpus = '8'
    memory = '5.GB'
    queue = ''
    disk = ''
  }
  withName: InferExperiment {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: InferStrandness {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: FeatureCounts {
    cpus = '8'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: PrimaryAlignments {
    cpus = '8'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: Junctions {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: Coverage {
    cpus = '5'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: WigToBigWig {
    cpus = 1
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: MeanCoverage {
    cpus = '5'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: TXQuant {
    cpus = '8'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: CountObjects {
    cpus = '5'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: CoverageObjects {
    cpus = '5'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
  withName: VariantCalls {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: VariantsMerge {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = ''
    disk = ''
  }
  withName: ExpressedRegions {
    cpus = '8'
    memory = '10.GB'
    queue = ''
    disk = ''
  }
}
