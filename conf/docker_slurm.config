/*
vim: syntax=groovy
-*- mode: groovy;-*-
 *
 *  Config specifying everything sufficient to run the pipeline
 *  using docker containers. To include specification related to
 *  the execution environment, consider additionally including
 *  slurm.config, sge.config, or sge_large.config.
 *
 */


docker {
    enabled = true
    temp = 'auto'
}

executor {
    name = 'slurm'
    queueSize = 30             // maximum number of jobs to concurrently run
    submitRateLimit = '1 sec'  // max number of jobs to submit per second
    
    // This is the amount of time nextflow allows before killing a job,
    // when it fails to communicate with SLURM about the job status. A fairly large
    // value like 30 min may be necessary for occasionally slow clusters.
    exitReadTimeout = '20 min'
}

params {
    gencode_version_human = "32"
    gencode_version_mouse = "M23"
    ensembl_version_rat = "98"
    anno_build = "main" // main or primary (main is canonical seqs only)
    
    num_reads_infer_strand = 2000000
    salmon_min_read_len = 31
    min_intron_len = 20
    bam2wig_depth_thres = 4000000000
    samtools_min_map_q = 0
    samtools_min_base_q = 13
    samtools_max_depth = 1000000
    kallisto_len_mean = 200
    kallisto_len_sd = 30
    
    // Settings for trimmomatic's adapter trimming. Note that the adapter fasta
    // specification is in conf/command_paths_short.config. Leave empty
    // (i.e. "") to instruct SPEAQeasy to not perform adapter trimming.
    trim_adapter_args_single = "2:30:10"
    trim_adapter_args_paired = "2:30:10:1:TRUE"
  
    // Settings for trimmomatic's quality trimming. Leave empty (i.e. "") to
    // not perform quality trimming.
    trim_quality_args = "LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:75"
    
    feat_counts_gene_opts = ""
    feat_counts_exon_opts = "-O"
    wiggletools_max_threads = 1000
}

process {
    // Defaults which apply to all processes unless specified otherwise
    disk = 10.GB
    time = 15.m
    
    // Retry process execution up to once if hardware resources (memory, 
    // cpus, etc) are temporarily insufficient
    errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
    maxRetries = 1

    withName: PullAssemblyFasta {
        cpus = 1
        memory = 2.GB
        container = 'libddocker/ubuntu16.04_base:latest'
    }
    withName: buildHISATindex {
        cpus = 8
        memory = 32.GB
        time = 2.h
        container = 'libddocker/hisat2:2.1.0'
    }
    withName: PullGtf {
        cpus = 1
        memory = 2.GB
        container = 'libddocker/ubuntu16.04_base:latest'
    }
    withName: PullTranscriptFasta {
        cpus = 1
        memory = 2.GB
        container = 'libddocker/ubuntu16.04_base:latest'
    }
    withName: buildSALMONindex  {
        cpus = 4
        memory = 40.GB
        time = 30.m
        container = 'libddocker/salmon:0.14.1'
    }
    withName: BuildKallistoIndex {
        cpus = 1
        memory = 10.GB
        time = 30.m
        container = 'libddocker/kallisto:0.46.1'
    }
    withName: PreprocessInputs {
        cpus = { 1 * task.attempt }
        memory = 2.GB
        disk = 80.GB
        container = 'libddocker/r_3.6.1_bioc'
    }
    withName: BuildAnnotationObjects {
        cpus = 1
        memory = 15.GB
        container = 'libddocker/r_3.6.1_bioc'
    }
    withName: CompleteManifest {
        cpus = 1
        memory = 2.GB
        time = 5.m
        container = 'libddocker/r_3.6.1_bioc'
    }
    withName: ERCC {
        cpus = 4
        memory = 8.GB
        container = 'libddocker/kallisto:0.46.1'
    }
    withName: QualityUntrimmed {
        cpus = 2
        memory = 8.GB
        container = 'libddocker/fastqc:0.11.8'
    }
    withName: Trimming {
        cpus = 4
        memory = 12.GB
        disk = 80.GB
        container = 'libddocker/trimmomatic:0.39'
    }
    withName: QualityTrimmed {
        cpus = 2
        memory = 8.GB
        container = 'libddocker/fastqc:0.11.8'
    }
    withName: SingleEndHISAT {
        cpus = 4
        memory = 20.GB
        disk = 800.GB
        time = 45.m
        container = 'libddocker/hisat2:2.1.0'
    }
    withName: PairedEndHISAT {
        cpus = 4
        memory = 20.GB
        disk = 800.GB
        time = 45.m
        container = 'libddocker/hisat2:2.1.0'
    }
    withName: SamtoBam {
        cpus = 2
        memory = 30.GB
        disk = 150.GB
        time = 30.m
        container = 'libddocker/samtools:1.9'
    }
    withName: InferStrandness {
        cpus = { 2 * task.attempt }
        memory = 10.GB
        container = 'libddocker/infer_strandness:latest'
    }
    withName: FeatureCounts {
        cpus = 4
        memory = 12.GB
        container = 'libddocker/subread:2.0.0'
    }
    withName: PrimaryAlignments {
        cpus = 2
        memory = 12.GB
        container = 'libddocker/samtools:1.9'
    }
    withName: Junctions {
        cpus = { 1 * task.attempt }
        memory = 2.GB
        container = 'libddocker/regtools:0.5.1'
    }
    withName: Coverage {
        cpus = 4
        memory = 40.GB
        disk = 100.GB
        time = 30.m
        container = 'libddocker/rseqc:3.0.1'
    }
    withName: WigToBigWig {
        cpus = 1
        memory = 2.GB
        disk = 30.GB
        container = 'libddocker/wiggletools-1.2:latest'
    }
    withName: MeanCoverage {
        cpus = 4
        memory = 40.GB
        container = 'libddocker/wiggletools-1.2:latest'
    }
    withName: TXQuantSalmon {
        cpus = 1
        memory = 20.GB
        time = 25.m
        container = 'libddocker/salmon:0.14.1'
    }
    withName: TXQuantKallisto {
        cpus = 4
        memory = '20.GB'
        container = 'libddocker/kallisto:0.46.1'
    }
    withName: CountObjects {
        cpus = 2
        memory = 40.GB
        disk = 100.GB
        clusterOptions = '-t 40:00'
        container = 'libddocker/r_3.6.1_bioc'
    }
    withName: CoverageObjects {
        cpus = 2
        memory = 12.GB
        disk = 100.GB
        time = 45.m
        container = 'libddocker/r_3.6.1_bioc'
    }
    withName: VariantCalls {
        cpus = { 1 + task.attempt }
        memory = 2.GB
        container = 'libddocker/variant_calling:1.9'
    }
    withName: VariantsMerge {
        cpus = { 1 + task.attempt }
        memory = 4.GB
        container = 'libddocker/variant_calling:1.9'
    }
    withName: ExpressedRegions {
        cpus = 4
        memory = 12.GB
        disk = 100.GB
        time = 4.h
        container = 'libddocker/r_3.6.1_bioc'
    }
}
