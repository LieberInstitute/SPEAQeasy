/*
vim: syntax=groovy
-*- mode: groovy;-*-
 *
 * Configuration for local execution of the pipeline. It is assumed the
 * environment has access to 16GB of usable RAM and 8 CPUs. Software
 * should be locally downloaded (install_software.sh has been run).
 */

params {
  salmon_min_read_len = 31
  min_intron_len = 20
  bam2wig_depth_thres = 4000000000
  samtools_min_map_q = 0
  samtools_min_base_q = 13
  samtools_max_depth = 1000000
  kallisto_len_mean = 200
  kallisto_len_sd = 30
  trim_clip_single = "2:30:10"
  trim_clip_paired = "2:30:10:1:TRUE"
  trim_lead = 3
  trim_trail = 3
  trim_slide_window = "4:15"
  trim_min_len = 75
}


process {

  executor = 'local'
  time = '6.h'
  errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
  maxRetries = 2

  withName: pullGENCODEassemblyfa {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: buildHISATindex {
    cpus = 8
    memory = '8.GB'
  }
  withName: pullGENCODEgtf {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: buildPrepBED {
    cpus = 4
    memory = '8.GB'
  }
  withName: pullGENCODEtranscripts {
    cpus = 1
    memory = '4.GB'
  }
  withName: buildSALMONindex  {
    cpus = 8
    memory = '8.GB'
  }
  withName: PreprocessInputs {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: ERCC {
    cpus = 8
    memory = '8.GB'
  }
  withName: QualityUntrimmed { 
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: AdaptiveTrimSingleReads {
    cpus = { 1 * task.attempt }
    memory = '1.GB'
  }
  withName: AdaptiveTrimPairedReads {
    cpus = { 1 * task.attempt }
    memory = '1.GB'
  }
  withName: Trimming {
    cpus = 8
    memory = '8.GB'
  }
  withName: QualityTrimmed {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: SingleEndHISAT {
    cpus = 8
    memory = '8.GB'
  }
  withName: PairedEndNoTrimHISAT {
    cpus = 8
    memory = '8.GB'
  }
  withName: PairedEndTrimmedHISAT {
    cpus = 8
    memory = '8.GB'
  }
  withName: SamtoBam {
    cpus = 8
    memory = '8.GB'
  }
  withName: InferExperiment {
    cpus = { 1 * task.attempt }
    memory = '1.GB'
  }
  withName: InferStrandness {
    cpus = { 1 * task.attempt }
    memory = '1.GB'
  }
  withName: FeatureCounts {
    cpus = 4
    memory = '2.GB'
  }
  withName: PrimaryAlignments {
    cpus = 4
    memory = '2.GB'
  }
  withName: Junctions {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
  }
  withName: Coverage {
    cpus = '5'
    memory = '8.GB'
  }
  withName: WigToBigWig {
    cpus = 1
    memory = '4.GB'
  }
  withName: MeanCoverage {
    cpus = '5'
    memory = '8.GB'
  }
  withName: TXQuant {
    cpus = 8
    memory = '8.GB'
  }
  withName: CountObjects {
    cpus = 4
    memory = '8.GB'
  }
  withName: CoverageObjects {
    cpus = 4
    memory = '8.GB'
  }
  withName: VariantCalls {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: VariantsMerge {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: ExpressedRegions {
    cpus = 8
    memory = '8.GB'
  }

}
