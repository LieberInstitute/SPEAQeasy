/*
vim: syntax=groovy
-*- mode: groovy;-*-
 *
 * Configuration for local execution of the pipeline. It is assumed the
 * environment has access to 16GB of usable RAM and 8 CPUs. Software
 * should be locally downloaded (install_software.sh has been run).
 */

params {
  gencode_version_human = "32"
  gencode_version_mouse = "M23"
  ensembl_version_rat = "98"
  anno_build = "main" // main or primary (main is canonical seqs only)
  
  num_reads_infer_strand = 2000000
  salmon_min_read_len = 31
  min_intron_len = 20
  bam2wig_depth_thres = 4000000000
  samtools_min_map_q = 0
  samtools_min_base_q = 13
  samtools_max_depth = 1000000
  kallisto_len_mean = 200
  kallisto_len_sd = 30
  
  // Settings for trimmomatic's adapter trimming. Note that the adapter fasta
  // specification is in conf/command_paths_long.config. Leave empty
  // (i.e. "") to instruct SPEAQeasy to not perform adapter trimming.
  trim_adapter_args_single = "2:30:10"
  trim_adapter_args_paired = "2:30:10:1:TRUE"
  
  // Settings for trimmomatic's quality trimming. Leave empty (i.e. "") to
  // not perform quality trimming.
  trim_quality_args = "LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:75"
  
  feat_counts_gene_opts = ""
  feat_counts_exon_opts = "-O"
  wiggletools_max_threads = 1000 // for computing mean; more threads may be used
}

executor = 'local'

process {

  time = { 10.hour * task.attempt }
  errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }

  maxRetries = 1

  withName: PullAssemblyFasta {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: buildHISATindex {
    cpus = 8
    memory = '8.GB'
  }
  withName: PullGtf {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: BuildAnnotationObjects {
    cpus = 1
    memory = 10.GB
  }
  withName: BuildKallistoIndex {
    cpus = 1
    memory = '10.GB'
  }
  withName: PullTranscriptFasta {
    cpus = 1
    memory = '4.GB'
  }
  withName: buildSALMONindex  {
    cpus = 4
    memory = '8.GB'
  }
  withName: PreprocessInputs {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: CompleteManifest {
    cpus = 1
    memory = '2.GB'
  }
  withName: ERCC {
    cpus = 4
    memory = '8.GB'
  }
  withName: QualityUntrimmed { 
    cpus = 2
    memory = '4.GB'
  }
  withName: Trimming {
    cpus = 8
    memory = '8.GB'
  }
  withName: QualityTrimmed {
    cpus = 2
    memory = '4.GB'
  }
  withName: SingleEndHISAT {
    cpus = 8
    memory = '8.GB'
  }
  withName: PairedEndHISAT {
    cpus = 8
    memory = '8.GB'
  }
  withName: SamtoBam {
    cpus = 8
    memory = '8.GB'
  }
  withName: InferStrandness {
    cpus = 2
    memory = '10.GB'
  }
  withName: FeatureCounts {
    cpus = 4
    memory = '2.GB'
  }
  withName: PrimaryAlignments {
    cpus = 4
    memory = '2.GB'
  }
  withName: Junctions {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
  }
  withName: Coverage {
    cpus = '5'
    memory = '8.GB'
  }
  withName: WigToBigWig {
    cpus = 1
    memory = '4.GB'
  }
  withName: MeanCoverage {
    cpus = '5'
    memory = '8.GB'
  }
  withName: TXQuantSalmon {
    cpus = 1
    memory = '8.GB'
  }
  withName: TXQuantKallisto {
    cpus = 2
    memory = '8.GB'
  }
  withName: CountObjects {
    cpus = 4
    memory = '8.GB'
  }
  withName: CoverageObjects {
    cpus = 4
    memory = '8.GB'
  }
  withName: VariantCalls {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: VariantsMerge {
    cpus = { 1 * task.attempt }
    memory = '4.GB'
  }
  withName: ExpressedRegions {
    cpus = 8
    memory = '8.GB'
  }

}
