/*
vim: syntax=groovy
-*- mode: groovy;-*-
 *
 * Configuration for execution of the pipeline on a computing cluster
 * managed with Sun Grid Engines (SGE).
 *
 */

params {
  gencode_version_human = "32"
  gencode_version_mouse = "M25"
  ensembl_version_rat = "98"
  anno_build = "main" // main or primary (main is canonical seqs only)
  
  //  Number of FASTQ lines to subset when determining strandness for a sample
  num_reads_infer_strand = 2000000
  
  wiggletools_max_threads = 10
  
  //  Note that the "-d", "-i", "-o", and "-s" arguments are internally handled
  //  by SPEAQeasy, and should not be specified here
  bam2wig_args = "-t 4000000000"
  
  //  For variant calling on human samples ('bcftools call')
  bcftools_args = "-mvOz"
  
  //  Note that the "-t" and "--extract" arguments are internally handled
  //  by SPEAQeasy, and should not be specified here
  fastqc_args = ""
  
  //  Note that the "-a", "-o", "-p", and "-T" arguments are internally handled
  //  by SPEAQeasy as appropriate, and should not be specified below
  feat_counts_gene_args = ""
  feat_counts_exon_args = "-O -f"
  
  //  Note that the "-1", "-2", "-p", "--rna-strandness", "--un-conc", "-x", 
  //  "-S", and "-U" arguments are internally handled as applicable by the
  //  pipeline, and should not be specified here. Also note that
  //  "--min-intronlen" is also used by regtools as the "-m" argument (see 
  //  "regtools_args"), and should be kept consistent!
  hisat2_args = "--phred33 --min-intronlen 20"
  
  //  Note that the "-i", "-o", "-t", and "--fr-stranded"/"--rf-stranded"
  //  arguments are handled internally by SPEAQeasy and should not be specified
  //  below
  kallisto_len_mean = "200"
  kallisto_len_sd = "30"
  kallisto_quant_single_args = "--single -l ${kallisto_len_mean} -s ${kallisto_len_sd}"
  kallisto_quant_paired_args = ""
  kallisto_quant_ercc_single_args = "--single -l ${kallisto_len_mean} -s ${kallisto_len_sd}"
  kallisto_quant_ercc_paired_args = ""
  kallisto_index_args = ""
  
  //  Note that the "--gencode", "-i", "-p", and "-t" arguments are
  //  automatically handled by SPEAQeasy, and should not be specified here
  salmon_index_args = "-k 31"
  
  //  Note that the "-1", "-2", "-l", "-o", "-p", and "-r" arguments are
  //  handled internally by SPEAQeasy, and should not be specified below
  salmon_quant_args = ""
  
  //  Arguments passed to 'samtools mpileup' before calling variants on human
  //  samples. Note that the "-f", "-l", "-o", and "-u" arguments are handled
  //  internally by SPEAQeasy, and should not be specified below.
  samtools_args = "-q 0 -Q 13 -d 1000000 -AB"
  
  //  Settings for trimmomatic's adapter trimming. Note that the adapter fasta
  //  specification is in conf/command_paths_short.config. Leave empty
  //  (i.e. "") to instruct SPEAQeasy to not perform adapter trimming.
  trim_adapter_args_single = "2:30:10"
  trim_adapter_args_paired = "2:30:10:1:TRUE"
  
  //  Settings for trimmomatic's quality trimming. Leave empty (i.e. "") to
  //  not perform quality trimming.
  trim_quality_args = "LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:75"
  
  //  Arguments to 'regtools junctions extract'. Note that the "-o" and "-s"
  //  arguments are handled internally, and should not be specified below. Also
  //  note that the "-m" argument is also used by hisat2 as the 
  //  "--min-intronlen" argument (see "hisat2_args"), and should be kept
  //  consistent!
  regtools_args = "-m 20"
  
  wigToBigWig_args = "-clip"
}


executor {
    name = 'sge'
    queueSize = 40             // maximum number of jobs to concurrently run
    submitRateLimit = '1 sec'  // max number of jobs to submit per second
    
    // This is the amount of time nextflow allows before killing a job,
    // when it fails to communicate with SGE about the job status. A fairly large
    // value like 30 min is often necessary for occasionally slow clusters.
    exitReadTimeout = '30 min'
}

process {
  // Default which applies to all processes unless specified otherwise
  time = { 15.m * task.attempt }
    
  // Retry process execution up to once if hardware resources (memory, 
  // cpus, etc) are temporarily insufficient
  errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
  maxRetries = 1
  
  cache = 'lenient'

  withName: PullAssemblyFasta {
    cpus = { 1 * task.attempt }
    memory = '2.GB'
  }
  withName: buildHISATindex {
    cpus = 4
    memory = '60.GB'
    time = { 2.h * task.attempt }
  }
  withName: PullGtf {
    cpus = 1
    memory = '2.GB'
  }
  withName: BuildAnnotationObjects {
    cpus = 1
    memory = '15.GB'
    time = { 30.m * task.attempt }
  }
  withName: BuildKallistoIndex {
    cpus = 1
    memory = '20.GB'
    time = { 2.h * task.attempt }
  }
  withName: PullTranscriptFasta {
    cpus = 1
    memory = '2.GB'
  }
  withName: buildSALMONindex  {
    cpus = 6
    memory = '60.GB'
    time = { 2.h * task.attempt }
  }
  withName: PreprocessInputs {
    cpus = 1
    memory = '2.GB'
    time = { 30.m * task.attempt }
    clusterOptions = '-l h_fsize=50G'
  }
  withName: CompleteManifest {
    cpus = 1
    memory = '2.GB'
    clusterOptions = '-l h_fsize=50G'
  }
  withName: ERCC {
    cpus = 4
    memory = '8.GB'
    time = { 1.h * task.attempt }
  }
  withName: QualityUntrimmed { 
    cpus = 1
    memory = '10.GB'
    time = { 1.h * task.attempt }
  }
  withName: Trimming {
    cpus = 4
    memory = '16.GB'
    time = { 4.h * task.attempt }
    clusterOptions = '-l h_fsize=50G -R y'
  }
  withName: QualityTrimmed {
    cpus = 1
    memory = '10.GB'
    time = { 1.h * task.attempt }
  }
  withName: SingleEndHISAT {
    cpus = 4
    memory = '20.GB'
    time = { 10.h * task.attempt }
    clusterOptions = '-l h_fsize=500G -R y'
  }
  withName: PairedEndHISAT {
    cpus = 4
    memory = '20.GB'
    time = { 10.h * task.attempt }
    clusterOptions = '-l h_fsize=500G -R y'
  }
  withName: SamtoBam {
    cpus = 2
    memory = '30.GB'
    time = { 5.h * task.attempt }
    clusterOptions = '-l h_fsize=150G -R y'
  }
  withName: InferStrandness {
    cpus = { 2 * task.attempt }
    memory = '20.GB'
    clusterOptions = '-l h_fsize=20G -R y'
  }
  withName: FeatureCounts {
    cpus = 4
    memory = '12.GB'
    time = { 2.h * task.attempt }
    clusterOptions = '-R y'
  }
  withName: PrimaryAlignments {
    cpus = 2
    memory = '12.GB'
    time = { 4.h * task.attempt }
    clusterOptions = '-l h_fsize=50G -R y'
  }
  withName: Junctions {
    cpus = 1
    memory = '2.GB'
    time = { 4.h * task.attempt }
  }
  withName: Coverage {
    cpus = 4
    memory = '60.GB'
    time = { 4.h * task.attempt }
    clusterOptions = '-l h_fsize=100G -R y'
  }
  withName: WigToBigWig {
    cpus = 1
    memory = '20.GB'
    time = { 2.h * task.attempt }
    clusterOptions = '-l h_fsize=30G'
  }
  withName: MeanCoverage {
    cpus = 5
    memory = '50.GB'
    time = { 2.h * task.attempt }
    clusterOptions = '-R y'
  }
  withName: TXQuantSalmon {
    cpus = 2
    memory = '20.GB'
    time = { 1.h * task.attempt }
    clusterOptions = '-R y'
  }
  withName: TXQuantKallisto {
    cpus = 5
    memory = '20.GB'
    time = { 1.h * task.attempt }
    clusterOptions = '-R y'
  }
  withName: CountObjects {
    cpus = 2
    memory = '40.GB'
    time = { 8.h * task.attempt }
    clusterOptions = '-l h_fsize=100G -R y'
  }
  withName: CoverageObjects {
    cpus = 4
    memory = '16.GB'
    time = { 2.h * task.attempt }
    clusterOptions = '-l h_fsize=50G -R y'
  }
  withName: VariantCalls {
    cpus = 1
    memory = '2.GB'
    time = { 1.h * task.attempt }
  }
  withName: VariantsMerge {
    cpus = 1
    memory = '4.GB'
    time = { 1.h * task.attempt }
  }
  withName: ExpressedRegions {
    cpus = 4
    memory = '24.GB'
    time = { 8.h * task.attempt }
    clusterOptions = '-l h_fsize=100G -R y'
  }
}
