/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 * 
 *
 * In order to customize the cluster environment for sge-large,
 * simply change the cpu and memory available to the executor
 * as well as each task below
 */


process {

  executor = 'sge'

  queue = 'mainqueue'
  disk = '2.GB'
  //cpus = { 1 * task.attempt }
  memory = { 2.GB * task.attempt }
  time = { 2.hour * task.attempt }
  errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }

  maxRetries = '3'
  maxErrors = '-1'

  $pullGENCODEassemblyfa {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $buildHISATindex {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $pullGENCODEgtf {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $buildPrepBED {
    //cpus = { 4 * task.attempt }
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $pullGENCODEtranscripts {
    //cpus = '1'
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $buildSALMONindex  {
    //cpus = { 4 * task.attempt }
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $Merging {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $ERCC {
    //cpus = '4'
    memory = '5.GB'
    queue = 'mainqueue'
    disk = '' 
  }
  $IndividualManifest {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $Manifest {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $QualityUntrimmed { 
    //cpus = { 1 * task.attempt }
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $AdaptiveTrimSingleReads {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $AdaptiveTrimPairedReads {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $Trimming {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $QualityTrimmed {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $SingleEndHISAT {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $PairedEndNoTrimHISAT {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $PairedEndTrimmedHISAT {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $SamtoBam {
    //cpus = '4'
    memory = '5.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $InferExperiment {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $InferStrandness {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $FeatureCounts {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $PrimaryAlignments {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $Junctions {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $Coverage {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $WigToBigWig {
    //cpus = 1
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $MeanCoverage {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $TXQuant {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $CountObjects {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $CoverageObjects {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $VariantCalls {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $VariantsMerge {
    //cpus = { 1 * task.attempt }
    memory = '2.GB'
    queue = 'mainqueue'
    disk = ''
  }
  $ExpressedRegions {
    //cpus = '4'
    memory = '10.GB'
    queue = 'mainqueue'
    disk = ''
  }
}
